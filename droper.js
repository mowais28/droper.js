(function (global) { const droper = { init: function (selector) { const input = typeof selector === 'string' ? document.querySelector(selector) : selector; if (!input || input.type !== 'file') return; const container = document.createElement('div'); container.className = 'droper-container border rounded my-2 bg-light text-center position-relative'; container.style.cursor = 'pointer'; const placeholder = document.createElement('p'); placeholder.className = 'text-muted mb-0'; placeholder.innerText = 'Click or drag files here to upload'; container.appendChild(placeholder); const previewArea = document.createElement('div'); previewArea.classList.add('droper-preview', 'row', 'mt-3', 'g-3'); container.appendChild(previewArea); input.hidden = true; input.parentNode.insertBefore(container, input); container.appendChild(input); let selectedFiles = []; const isMultiple = input.hasAttribute('multiple'); container.addEventListener('click', () => input.click());['dragenter', 'dragover'].forEach(evt => container.addEventListener(evt, e => { e.preventDefault(); container.classList.add('border-primary'); }));['dragleave', 'drop'].forEach(evt => container.addEventListener(evt, e => { e.preventDefault(); container.classList.remove('border-primary'); })); container.addEventListener('drop', e => { e.preventDefault(); handleFiles(e.dataTransfer.files); }); input.addEventListener('change', () => { handleFiles(input.files); input.value = ''; }); function handleFiles(files) { if (!isMultiple) { selectedFiles = [files[0]]; } else { Array.from(files).forEach(f => selectedFiles.push(f)); } render(); } function render() { previewArea.innerHTML = ''; if (selectedFiles.length === 0) { placeholder.style.display = 'block'; container.style.padding = '3rem'; } else { placeholder.style.display = 'none'; container.style.padding = '0rem 1rem'; } selectedFiles.forEach((file, index) => { const col = document.createElement('div'); col.className = 'col-md-3'; const card = document.createElement('div'); card.className = 'card position-relative shadow-sm'; let media; const type = file.type; if (type.startsWith('image/')) { media = document.createElement('img'); media.src = URL.createObjectURL(file); media.className = 'card-img-top'; media.style.height = '160px'; media.style.objectFit = 'cover'; } else if (type === 'application/pdf') { media = document.createElement('iframe'); media.src = URL.createObjectURL(file); media.className = 'card-img-top'; media.style.height = '160px'; } else if (type.startsWith('video/')) { media = document.createElement('video'); media.src = URL.createObjectURL(file); media.controls = true; media.className = 'card-img-top'; media.style.height = '160px'; } else { media = document.createElement('div'); media.className = 'd-flex flex-column justify-content-center align-items-center p-3 text-center'; const ext = file.name.split('.').pop().toLowerCase(); const iconSvg = document.createElement('div'); iconSvg.innerHTML = getFileSVG(ext); iconSvg.style.height = '160px'; const label = document.createElement('small'); label.className = 'text-muted text-truncate w-100 d-block mt-2'; label.textContent = file.name; media.appendChild(iconSvg); media.appendChild(label); } const removeBtn = document.createElement('button'); removeBtn.type = 'button'; removeBtn.className = 'btn btn-danger btn-sm position-absolute top-0 end-0 m-1'; removeBtn.innerHTML = '&times;'; removeBtn.onclick = (e) => { e.stopPropagation(); selectedFiles.splice(index, 1); render(); }; card.appendChild(media); card.appendChild(removeBtn); col.appendChild(card); previewArea.appendChild(col); }); } function getFileSVG(ext) { const colors = { doc: '#2B579A', docx: '#2B579A', xls: '#217346', xlsx: '#217346', ppt: '#D24726', pptx: '#D24726', pdf: '#D9381E', txt: '#5E5E5E', zip: '#8C8C8C', rar: '#8C8C8C', exe: '#444444', apk: '#25D366', default: '#888888' }; const color = colors[ext] || colors['default']; return `<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" fill="${color}" viewBox="0 0 16 16"><path d="M4 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V6.5L9.5 0H4z"/><text x="8" y="12" text-anchor="middle" font-size="6" fill="white" font-family="Arial">${ext.slice(0, 3).toUpperCase()}</text></svg>`; } input._droperFiles = selectedFiles; }, initAll: function (selector) { document.querySelectorAll(selector).forEach(el => { this.init(el); }); } }; global.droper = droper; })(window);
